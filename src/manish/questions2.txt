1) What is the Java Collection framework? List down its advantages?
	A collection is an object that represents a group of objects.
	Like in set theory, a set is group of elements.
	Prior to JDK 1.2, JDK has some utility classes such as Vector and HashTable, but there was no concept of Collection framework. Later from JDK 1.2 onwards, JDK felt the need of having a consistent support for reusable data structures. Finally, the collections framework was designed and developed primarily by Joshua Bloch, and was introduced in JDK 1.2.
	
	Advantages
		1. Reduced programming effort due to ready to use code
		2. Increased performance because of high-performance implementations of data structures and algorithms
		3. Provides interoperability between unrelated APIs by establishing a common language to pass collections back and forth
		4. Easy to learn APIs by learning only some top level interfaces and supported operations
		
2) Why Collection interface does not extend Cloneable and Serializable interface?
	Well, simplest answer is “there is no need to do it“. Extending an interface simply means that you are creating a subtype of interface, in other words a more specialized behavior and Collection interface is not expected to do what Cloneable and Serializable interfaces do.

	Another reason is that not everybody will have a reason to have Cloneable collection because if it has very large data, then every unnecessary clone operation will consume a big memory. Beginners might use it without knowing the consequences.

	Another reason is that Cloneable and Serializable are very specialized behavior and so should be implemented only when required. For example, many concrete classes in collection implement these interfaces. So if you want this feature. use these collection classes otherwise use their alternative classes.
	
3) Why Map interface does not extend Collection interface?
	A good answer to this interview question is “because they are incompatible“. Collection has a method add(Object o). Map can not have such method because it need key-value pair. There are other reasons also such as Map supports keySet, valueSet etc. Collection classes does not have such views.

	Due to such big differences, Collection interface was not used in Map interface, and it was build in separate hierarchy.

	List interface related
4) Why we use List interface? What are main classes implementing List interface?
	A java list is a “ordered” collection of elements. This ordering is a zero based index. It does not care about duplicates. Apart from methods defined in Collection interface, it does have its own methods also which are largely to manipulate the collection based on index location of element. These methods can be grouped as search, get, iteration and range view. All above operations support index locations

5) How to convert an array of String to arraylist?
	String[] words = {"ace", "boom", "crew", "dog", "eon"};
	//Use Arrays utility class
	List wordList = Arrays.asList(words);
	
	Set interface related

6) Why we use Set interface? What are main classes implementing Set interface?
	It models the mathematical set in set theory. Set interface is like List interface but with some differences. First, it is not ordered collection. So no ordering is preserved while adding or removing elements. The main feature it does provide is “uniqueness of elements“. It does not support duplicate elements.
	Main classes implementing Set interface are : EnumSet, HashSet, LinkedHashSet, TreeSet.
	
7) How HashSet store elements?
	private transient HashMap<E,Object> map;
 
	//This is added as value for each key
	private static final Object PRESENT = new Object();
	
	public boolean add(E e) {
	return map.put(e, PRESENT)==null;
	}
8) Can a null element added to a TreeSet or HashSet?
	HashMap also allows one null key, so one “null” is allowed in HashSet.
	
9) 	Tree Set 
	TreeSet uses the same concept as HashSet for internal logic, but uses NavigableMap for storing the elements.
	private transient NavigableMap<E,Object> m;
 
	// Dummy value to associate with an Object in the backing Map
	private static final Object PRESENT = new Object();
	NavigableMap is subtype of SortedMap which does not allow null keys. So essentially, TreeSet also does not support null keys. It will throw NullPointerException if you try to add null element in TreeSet.

	Map interface related
10) Why we use Map interface? What are main classes implementing Map interface?
	Map interface is a special type of collection which is used to store key-value pairs. It does not extend Collection interface for this reason. This interface provides methods to add, remove, search or iterate over various views of Map.

	Main classes implementing Map interface are: HashMap, Hashtable, EnumMap, IdentityHashMap, LinkedHashMap and Properties.
	
11) What are IdentityHashMap and WeakHashMap?
	IdentityHashMap is similar to HashMap except that it uses reference equality when comparing elements. IdentityHashMap class is not a widely used Map implementation. While this class implements the Map interface, it intentionally violates Map’s general contract, which mandates the use of the equals() method when comparing objects. IdentityHashMap is designed for use only in the rare cases wherein reference-equality semantics are required.

	WeakHashMap is an implementation of the Map interface that stores only weak references to its keys. Storing only weak references allows a key-value pair to be garbage collected when its key is no longer referenced outside of the WeakHashMap. This class is intended primarily for use with key objects whose equals methods test for object identity using the == operator. Once such a key is discarded it can never be recreated, so it is impossible to do a look-up of that key in a WeakHashMap at some later time and be surprised that its entry has been removed.

12) Explain ConcurrentHashMap? How it works?
13) What are different Collection views provided by Map interface?
	key set view
	value set view
	entry set view
	
14) When to use HashMap or TreeMap?
	HashMap is well known class and all of us know that. So, I will leave this part by saying that it is used to store key-value pairs and allows to perform many operations on such collection of pairs.

	TreeMap is special form of HashMap. It maintains the ordering of keys which is missing in HashMap class. This ordering is by default “natural ordering”. The default ordering can be override by providing an instance of Comparator class, whose compare method will be used to maintain ordering of keys.

	Please note that all keys inserted into the map must implement the Comparable interface (this is necessary to decide the ordering). Furthermore, all such keys must be mutually comparable: k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in the map. If the user attempts to put a key into the map that violates this constraint (for example, the user attempts to put a string key into a map whose keys are integers), the put(Object key, Object value) call will throw a ClassCastException.

Differences

15) Difference between Set and List?
	Set is unordered collection where List is ordered collection based on zero based index.
	List allow duplicate elements but Set does not allow duplicates.
	List does not prevent inserting null elements (as many you like), but Set will allow only one null element.

16) Difference between List and Map?
	List is collection of elements where as map is collection of key-value pairs. There is actually lots of differences which originate from first statement. They have separate top level interface, separate set of generic methods, different supported methods and different views of collection
	
17) Difference between HashMap and HashTable?
	Hashtable is synchronized, whereas HashMap is not.
	Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.
	The third significant difference between HashMap vs Hashtable is that Iterator in the HashMap is a fail-fast iterator while the enumerator for the Hashtable is not.
	
18) Difference between Vector and ArrayList?
	All the methods of Vector is synchronized. But, the methods of ArrayList is not synchronized.
	Vector is a Legacy class added in first release of JDK. ArrayList was part of JDK 1.2, when collection framework was introduced in java.
	By default, Vector doubles the size of its array when it is re-sized internally. But, ArrayList increases by half of its size when it is re-sized.

19) Difference between Iterator and Enumeration?
	Iterators differ from enumerations in three ways:

	Iterators allow the caller to remove elements from the underlying collection during the iteration with its remove() method. You can not add/remove elements from a collection when using enumerator.
	Enumeration is available in legacy classes i.e Vector/Stack etc. whereas Iterator is available in all modern collection classes.
	Another minor difference is that Iterator has improved method names e.g. Enumeration.hasMoreElement() has become Iterator.hasNext(), Enumeration.nextElement() has become Iterator.next() etc.
	
20) Difference between Iterator and ListIterator?
	There are three Differences are there:

	We can use Iterator to traverse Set and List and also Map type of Objects. But List Iterator can be used to traverse for List type Objects, but not for Set type of Objects.
	By using Iterator we can retrieve the elements from Collection Object in forward direction only whereas List Iterator, which allows you to traverse in either directions using hasPrevious() and previous() methods.
	ListIterator allows you modify the list using add() remove() methods. Using Iterator you can not add, only remove the elements.
	
21) Difference between ArrayList and LinkedList?
	LinkedList store elements within a doubly-linked list data structure. ArrayList store elements within a dynamically resizing array.
	LinkedList allows for constant-time insertions or removals, but only sequential access of elements. In other words, you can walk the list forwards or backwards, but grabbing an element in the middle takes time proportional to the size of the list. ArrayLists, on the other hand, allow random access, so you can grab any element in constant time. But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap.
	LinkedList has more memory overhead than ArrayList because in ArrayList each index only holds actual object (data) but in case of LinkedList each node holds both data and address of next and previous node.
	
22) How to make a collection read only?

	Collections.unmodifiableList(list);
	Collections.unmodifiableSet(set);
	Collections.unmodifiableMap(map);

23) How to make a collection thread safe?
	
	Collections.synchronizedList(list);
	Collections.synchronizedSet(set);
	Collections.synchronizedMap(map);

24) Why there is not method like Iterator.add() to add elements to the collection?
	The sole purpose of an Iterator is to enumerate through a collection. All collections contain the add() method to serve your purpose. There would be no point in adding to an Iterator because the collection may or may not be ordered. And add() method can not have same implementation for ordered and unordered collections.
	
	
25) What is the right data type to represent a price in Java?
	BigDecimal if memory is not a concern and Performance is not critical, otherwise double with predefined precision.
	Don’t use float and double on monetary calculation.
	Use BigDecimal, long or int for monetary calculation.
	Use BigDecimal with String constructor and avoid double one.
	Don’t use floating point result for comparing loop conditions.

26) How do you convert bytes to String?
	you can convert bytes to the string using string constructor which accepts byte[], just make sure that right character encoding otherwise platform's default character encoding will be used which may or may not be same.
	String str = new String(bytes, "UTF-8");
	If you are reading byte array from any text file e.g. XML document, HTML file or binary file, you can use the Apache Commons IO library to convert the FileInputStream to a String directly. This method also buffers the input internally, so there is no need to use another BufferedInputStream.
	
	String fromStream = IOUtils.toString(fileInputStream, "UTF-8");
	Some programmers, also recommends to use Charset over String for specifying character encoding,  e.g. instead of "UTF-8" use StandardCharsets.UTF_8 mainly to avoid
	
	String str = IOUtils.toString(fis,StandardCharsets.UTF_8);
	Use character encoding from the source e.g. Content-Type in HTML files, or <?xml encoding="…">.
	Use XML parsers to parse XML files instead of finding character encoding and reading it via InputStream, some things are best left for demo code only. 
	Prefer Charset constants e.g. StandardCharsets.UTF_16 instead of String "UTF-16"
	Never rely on platform's default encoding scheme
	
27) Is ++ operator is thread-safe in Java? 
	 No it's not a thread safe operator because its involve multiple instructions like reading a value, incriminating it and storing it back into memory which can be overlapped between multiple threads.

28) Can I store a double value in a long variable without casting? (answer)
	No, you cannot store a double value into a long variable without casting because the range of double is more  that long and you we need to type cast. It's not dificult to answer this question but many develoepr get it wrong due to confusion on which one is bigger between double and long in Java.

29) Why is String Immutable in Java? 
	1) String Pool
	2) Security
	3) Use of String in Class Loading Mechanism
	4) Multithreading Benefits
	5) Optimization and Performance

30) What is the size of int in 64-bit JVM?
	The size of an int variable is constant in Java, it's always 32-bit irrespective of platform. Which means the size of primitive int is same in both 32-bit and 64-bit Java virtual machine.
	
31) How do you find memory usage from Java program? How much percent of the heap is used?
	You can use memory related methods from java.lang.Runtime class to get the free memory, total memory and maximum heap memory in Java.  By using these methods, you can find out how many percents of the heap is used and how much heap space is remaining. Runtime.freeMemory() return amount of free memory in bytes, Runtime.totalMemory() returns total memory in bytes and Runtime.maxMemory() returns maximum memory in bytes.
	
32) Difference between final, finalize and finally? (answer)
	The final is a modifier which you can apply to variable, methods and classes. If you make a variable final it means its value cannot be changed once initialized. finalize is a method, which is called just before an object is a garbage collected, giving it last chance to resurrect itself, but the call to finalize is not guaranteed. finally is a keyword which is used in exception handling along with try and catch. the finally block is always executed irrespective of whether an exception is thrown from try block or not.
	
33) What is a compile time constant in Java? What is the risk of using it?
	public static final variables are also known as a compile time constant, the public is optional there. They are replaced with actual values at compile time because compiler know their value up-front and also knows that it cannot be changed during run-time. One of the problem with this is that if you happened to use a public static final variable from some in-house or third party library and their value changed later than your client will still be using old value even after you deploy a new version of JARs. To avoid that, make sure you compile your program when you upgrade dependency JAR files.

34) Difference between poll() and remove() method?
	Both poll() and remove() take out the object from the Queue but if poll() fails then it returns null but if remove fails it throws Exception.
	
35) The difference between LinkedHashMap and PriorityQueue in Java? 
	PriorityQueue guarantees that lowest or highest priority element always remain at the head of the queue, but LinkedHashMap maintains the order on which elements are inserted. When you iterate over a PriorityQueue, iterator doesn't guarantee any order but iterator of LinkedHashMap does guarantee the order on which elements are inserted
	
36) Which kind of tree is used to implement TreeMap in Java? (answer)
	A Red Black tree is used to implement TreeMap in Java.


37) What best practices you follow while writing multi-threaded code in Java? (answer)
	Here are couple of best practices which I follow while writing concurrent code in Java:
	a) Always name your thread, this will help in debugging.
	b) minimize the scope of synchronization, instead of making whole method synchronized, only critical section should be synchronized.
	c) prefer volatile over synchronized if you can can.
	e) use higher level concurrency utilities instead of waitn() and notify for inter thread communication e.g. BlockingQueue, CountDownLatch and Semeaphore.
	e) Prefer concurrent collection over synchronized collection in Java. They provide better scalability.

38) Tell me few best practices you apply while using Collections in Java? (answer)
	Here are couple of best practices I follow while using Collectionc classes from Java:
	a) Always use the right collection e.g. if you need non-synchronized list then use ArrayList and not Vector.
	b) Prefer concurrent collection over synchronized collection because they are more scalable.
	c) Always use interface to a represent and access a collection e.g. use List to store ArrayList, Map to store HashMap and so on.
	d) Use iterator to loop over collection.
	e) Always use generics with collection.
	
39) Name 5 JDBC best practices your follow? (answer)
	Another good Java best practices for experienced Java developer of 7 to 8 years experience. Why it's important? because they are the ones which set the trend in the code and educate junior developers. There are many best practices and you can name as per your confort and conviniece. Here are some of the more common ones:
	a) use batch statement for inserting and updating data.
	b) use PreparedStatement to avoid SQL exception and better performance.
	c) use database connection pool
	d) access resultset using column name instead of column indexes.
	e) Don't generate dynamic SQL by concatenating String with user input.

